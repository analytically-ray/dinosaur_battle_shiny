temperature = 0.8,
topP = 0.9,
topK = 40,
maxOutputTokens = 50
),
safetySettings = list(
list(category = "HARM_CATEGORY_HATE_SPEECH", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_DANGEROUS_CONTENT", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_HARASSMENT", threshold = "BLOCK_MEDIUM_AND_ABOVE")
)
)
response <- tryCatch({
POST(
url = api_url,
add_headers("Content-Type" = "application/json"),
body = toJSON(body, auto_unbox = TRUE)
)
}, error = function(e) {
warning("Error during HTTP POST to Gemini API: ", e$message)
return(NULL)
})
if (!is.null(response) &&
http_type(response) == "application/json" &&
status_code(response) == 200) {
parsed_content <- fromJSON(content(response, "text", encoding = "UTF-8"))
print("=== DEBUG: parsed_content structure ===")
str(parsed_content, max.level = 3)
generated_text <- tryCatch({
parts_list <- parsed_content$candidates$content$parts[[1]]
if (!is.null(parts_list) && length(parts_list) > 0) {
# Access the first part and get the "text" element
part <- parts_list[[1]]
if (!is.null(part$text)) {
return(part$text)
} else {
warning("Part does not contain 'text'.")
return("No text generated (missing 'text' in part).")
}
} else if (!is.null(parsed_content$promptFeedback$blockReason)) {
warning(paste("Gemini response blocked:", parsed_content$promptFeedback$blockReason))
return(paste0("Our announcer got shy! (Blocked: ", parsed_content$promptFeedback$blockReason, ")"))
} else {
warning("Gemini response content is empty or invalid.")
return("No text generated (empty or unexpected response).")
}
}, error = function(e) {
warning("Error parsing Gemini response: ", e$message)
return("The dinosaurs are too shy to fight right now! (Parsing error fallback)")
})
return(generated_text)
} else {
warning("Gemini API HTTP error or invalid response.")
return("The dinosaur fight announcer is taking a nap. (API/network issue)")
}
}
# Example usage
state <- new.env()
state$log <- ""
gemini_message <- call_gemini_attack_message("T-rex", "Triceratops", 5)
state$log <- paste0(state$log, "<p>", gemini_message, "</p>")
print(paste("Gemini returned:", gemini_message))
return(generated_text)
library(httr)
library(jsonlite)
setwd("C://Users//shopp//Documents//R//dinosaur_battle_app")
GEMINI_API_KEY <- readLines("gem_api.txt", warn = FALSE)
call_gemini_attack_message <- function(dinosaur1_name, dinosaur2_name, damage_amount) {
api_url <- paste0(
"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=",
GEMINI_API_KEY
)
prompt_text <- paste0(
"You are a fun and exciting game announcer for a dinosaur battle game for a 6-year-old. ",
"Describe a dinosaur attack in an energetic and imaginative way with less than 150 characters. ",
"The attacking dinosaur is '", dinosaur1_name, "' and the defending dinosaur is '", dinosaur2_name,
"', dealing ", damage_amount, " points of damage. ",
"Make sure the message clearly states the attacker, the target, and the damage dealt. ",
"Use bold HTML tags `<b>` for the damage number. Start with a dinosaur emoji (🦖). ",
"Example: 🦖 Rex bites Triceratops on the back for <b>15</b> damage!"
)
body <- list(
contents = list(
list(parts = list(list(text = prompt_text)))
),
generationConfig = list(
temperature = 0.8,
topP = 0.9,
topK = 40,
maxOutputTokens = 50
),
safetySettings = list(
list(category = "HARM_CATEGORY_HATE_SPEECH", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_DANGEROUS_CONTENT", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_HARASSMENT", threshold = "BLOCK_MEDIUM_AND_ABOVE")
)
)
response <- tryCatch({
POST(
url = api_url,
add_headers("Content-Type" = "application/json"),
body = toJSON(body, auto_unbox = TRUE)
)
}, error = function(e) {
warning("Error during HTTP POST to Gemini API: ", e$message)
return(NULL)
})
if (!is.null(response) &&
http_type(response) == "application/json" &&
status_code(response) == 200) {
parsed_content <- fromJSON(content(response, "text", encoding = "UTF-8"))
print("=== DEBUG: parsed_content structure ===")
str(parsed_content, max.level = 3)
generated_text <- tryCatch({
content_df <- parsed_content$candidates$content
parts_list <- content_df$parts[[1]]  # Extract the list of parts (length 1)
if (!is.null(parts_list) && length(parts_list) > 0) {
part <- parts_list[[1]]  # Get the first part (should be a named list with $text)
if (!is.null(part$text)) {
return(part$text)
} else {
warning("Part does not contain 'text'.")
return("No text generated (missing 'text' in part).")
}
} else if (!is.null(parsed_content$promptFeedback$blockReason)) {
warning(paste("Gemini response blocked:", parsed_content$promptFeedback$blockReason))
return(paste0("Our announcer got shy! (Blocked: ", parsed_content$promptFeedback$blockReason, ")"))
} else {
warning("Gemini response content is empty or invalid.")
return("No text generated (empty or unexpected response).")
}
}, error = function(e) {
warning("Error parsing Gemini response: ", e$message)
return("The dinosaurs are too shy to fight right now! (Parsing error fallback)")
})
return(generated_text)
} else {
warning("Gemini API HTTP error or invalid response.")
return("The dinosaur fight announcer is taking a nap. (API/network issue)")
}
}
# Example usage
state <- new.env()
state$log <- ""
gemini_message <- call_gemini_attack_message("T-rex", "Triceratops", 5)
state$log <- paste0(state$log, "<p>", gemini_message, "</p>")
print(paste("Gemini returned:", gemini_message))
library(httr)
library(jsonlite)
setwd("C://Users//shopp//Documents//R//dinosaur_battle_app")
GEMINI_API_KEY <- readLines("gem_api.txt", warn = FALSE)
call_gemini_attack_message <- function(dinosaur1_name, dinosaur2_name, damage_amount) {
api_url <- paste0(
"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=",
GEMINI_API_KEY
)
prompt_text <- paste0(
"You are a fun and exciting game announcer for a dinosaur battle game for a 6-year-old. ",
"Describe a dinosaur attack in an energetic and imaginative way with less than 150 characters. ",
"The attacking dinosaur is '", dinosaur1_name, "' and the defending dinosaur is '", dinosaur2_name,
"', dealing ", damage_amount, " points of damage. ",
"Make sure the message clearly states the attacker, the target, and the damage dealt. ",
"Use bold HTML tags `<b>` for the damage number. Start with a dinosaur emoji (🦖). ",
"Example: 🦖 Rex bites Triceratops on the back for <b>15</b> damage!"
)
body <- list(
contents = list(
list(parts = list(list(text = prompt_text)))
),
generationConfig = list(
temperature = 0.8,
topP = 0.9,
topK = 40,
maxOutputTokens = 50
),
safetySettings = list(
list(category = "HARM_CATEGORY_HATE_SPEECH", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_DANGEROUS_CONTENT", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_HARASSMENT", threshold = "BLOCK_MEDIUM_AND_ABOVE")
)
)
response <- tryCatch({
POST(
url = api_url,
add_headers("Content-Type" = "application/json"),
body = toJSON(body, auto_unbox = TRUE)
)
}, error = function(e) {
warning("Error during HTTP POST to Gemini API: ", e$message)
return(NULL)
})
if (!is.null(response) &&
http_type(response) == "application/json" &&
status_code(response) == 200) {
parsed_content <- fromJSON(content(response, "text", encoding = "UTF-8"))
print("=== DEBUG: parsed_content structure ===")
str(parsed_content, max.level = 3)
generated_text <- tryCatch({
content_df <- parsed_content$candidates$content
parts_list <- content_df$parts[[1]]  # Extract the list of parts (length 1)
if (!is.null(parts_list) && length(parts_list) > 0) {
part <- parts_list[[1]]  # Get the first part (should be a named list with $text)
if (!is.null(part$text)) {
return(part$text)
} else {
warning("Part does not contain 'text'.")
return("No text generated (missing 'text' in part).")
}
} else if (!is.null(parsed_content$promptFeedback$blockReason)) {
warning(paste("Gemini response blocked:", parsed_content$promptFeedback$blockReason))
return(paste0("Our announcer got shy! (Blocked: ", parsed_content$promptFeedback$blockReason, ")"))
} else {
warning("Gemini response content is empty or invalid.")
return("No text generated (empty or unexpected response).")
}
}, error = function(e) {
warning("Error parsing Gemini response: ", e$message)
return("The dinosaurs are too shy to fight right now! (Parsing error fallback)")
})
return(parsed_content)
} else {
warning("Gemini API HTTP error or invalid response.")
return("The dinosaur fight announcer is taking a nap. (API/network issue)")
}
}
# Example usage
state <- new.env()
state$log <- ""
gemini_message <- call_gemini_attack_message("T-rex", "Triceratops", 5)
state$log <- paste0(state$log, "<p>", gemini_message, "</p>")
print(paste("Gemini returned:", gemini_message))
gemini_message
gemini_message$candidates
gemini_message$candidates$content
gemini_message$candidates$content.parts
gemini_message$candidates$content
gemini_message$candidates$content[1]
runApp('dinosaur_battles_shiny.R')
library(httr)
library(jsonlite)
setwd("C://Users//shopp//Documents//R//dinosaur_battle_app")
GEMINI_API_KEY <- readLines("gem_api.txt", warn = FALSE)
call_gemini_attack_message <- function(dinosaur1_name, dinosaur2_name, damage_amount) {
api_url <- paste0(
"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=",
GEMINI_API_KEY
)
prompt_text <- paste0(
"You are a fun and exciting game announcer for a dinosaur battle game for a 6-year-old. ",
"Describe a dinosaur attack in an energetic and imaginative way with less than 150 characters. ",
"The attacking dinosaur is '", dinosaur1_name, "' and the defending dinosaur is '", dinosaur2_name,
"', dealing ", damage_amount, " points of damage. ",
"Make sure the message clearly states the attacker, the target, and the damage dealt. ",
"Use bold HTML tags `<b>` for the damage number. Start with a dinosaur emoji (🦖). ",
"Example: 🦖 Rex bites Triceratops on the back for <b>15</b> damage!"
)
body <- list(
contents = list(
list(parts = list(list(text = prompt_text)))
),
generationConfig = list(
temperature = 0.8,
topP = 0.9,
topK = 40,
maxOutputTokens = 50
),
safetySettings = list(
list(category = "HARM_CATEGORY_HATE_SPEECH", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_DANGEROUS_CONTENT", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_HARASSMENT", threshold = "BLOCK_MEDIUM_AND_ABOVE")
)
)
response <- tryCatch({
POST(
url = api_url,
add_headers("Content-Type" = "application/json"),
body = toJSON(body, auto_unbox = TRUE)
)
}, error = function(e) {
warning("Error during HTTP POST to Gemini API: ", e$message)
return(NULL)
})
if (!is.null(response) &&
http_type(response) == "application/json" &&
status_code(response) == 200) {
parsed_content <- fromJSON(content(response, "text", encoding = "UTF-8"))
print("=== DEBUG: parsed_content structure ===")
str(parsed_content, max.level = 3)
generated_text <- tryCatch({
content_df <- parsed_content$candidates$content[1]
parts_list <- content_df$parts[[1]]  # Extract the list of parts (length 1)
if (!is.null(parts_list) && length(parts_list) > 0) {
part <- parts_list[[1]]  # Get the first part (should be a named list with $text)
if (!is.null(part$text)) {
return(part$text)
} else {
warning("Part does not contain 'text'.")
return("No text generated (missing 'text' in part).")
}
} else if (!is.null(parsed_content$promptFeedback$blockReason)) {
warning(paste("Gemini response blocked:", parsed_content$promptFeedback$blockReason))
return(paste0("Our announcer got shy! (Blocked: ", parsed_content$promptFeedback$blockReason, ")"))
} else {
warning("Gemini response content is empty or invalid.")
return("No text generated (empty or unexpected response).")
}
}, error = function(e) {
warning("Error parsing Gemini response: ", e$message)
return("The dinosaurs are too shy to fight right now! (Parsing error fallback)")
})
return(parsed_content)
} else {
warning("Gemini API HTTP error or invalid response.")
return("The dinosaur fight announcer is taking a nap. (API/network issue)")
}
}
# Example usage
state <- new.env()
state$log <- ""
gemini_message <- call_gemini_attack_message("T-rex", "Triceratops", 5)
state$log <- paste0(state$log, "<p>", gemini_message, "</p>")
print(paste("Gemini returned:", gemini_message))
gemini_message$candidates$content[1]
print(gemini_message$candidates$content[1])
print(gemini_message$candidates$content[1,1])
print(gemini_message$candidates$content$parts[1])
runApp('dinosaur_battles_shiny.R')
runApp('dinosaur_battles_shiny.R')
runApp('dinosaur_battles_shiny.R')
runApp('dinosaur_battles_shiny.R')
runApp('dinosaur_battles_shiny.R')
runApp('dinosaur_battles_shiny.R')
library(httr)
library(jsonlite)
setwd("C://Users//shopp//Documents//R//dinosaur_battle_app")
GEMINI_API_KEY <- readLines("gem_api.txt", warn = FALSE)
call_gemini_attack_message <- function(dinosaur1_name, dinosaur2_name, damage_amount) {
api_url <- paste0("https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=", GEMINI_API_KEY)
prompt_text <- paste0(
"You are a fun and exciting game announcer for a dinosaur battle game for a 6-year-old. ",
"Describe a dinosaur attack in an energetic and imaginative way with less than 170 characters. ",
"The attacking dinosaur is '", dinosaur1_name, "' and the defending dinosaur is '", dinosaur2_name, "', dealing ", damage_amount, " damage. ",
"Make sure the message clearly states the attacker, the defender, and the damage dealt. ",
"Use bold HTML tags `<b>` for the damage number.",
"Example: T-Rex bites Triceratops on the back for <b>15</b> damage!"
)
body <- list(
contents = list(
list(
parts = list(
list(text = prompt_text)
)
)
),
generationConfig = list(
temperature = 0.8,
topP = 0.9,
topK = 40,
maxOutputTokens = 50
),
safetySettings = list(
list(category = "HARM_CATEGORY_HATE_SPEECH", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_DANGEROUS_CONTENT", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_HARASSMENT", threshold = "BLOCK_MEDIUM_AND_ABOVE")
)
)
response <- tryCatch({
POST(
url = api_url,
add_headers("Content-Type" = "application/json"),
body = toJSON(body, auto_unbox = TRUE)
)
}, error = function(e) {
warning("Error during HTTP POST to Gemini API: ", e$message)
return(NULL)
})
if (!is.null(response) && http_type(response) == "application/json" && status_code(response) == 200) {
parsed_content <- fromJSON(content(response, "text", encoding = "UTF-8"))
print("--- Full Gemini Response ---")
print(parsed_content)
print("--------------------------")
generated_text <- tryCatch({
# Check if 'candidates' exists and has at least one row (since it's a data.frame)
if (!is.null(parsed_content$candidates) && nrow(parsed_content$candidates) > 0) {
# **THIS IS THE CRUCIAL FIX**
# Access the first row [1, ] of the candidates data.frame, then get the content.parts column from it.
extracted_text <- parsed_content$candidates$content$parts[1]
if (!is.null(extracted_text) && !is.na(extracted_text) && nchar(extracted_text) > 0) {
extracted_text
} else {
warning("Gemini response candidate's 'content.parts' column is empty or invalid after extraction.")
"No text generated (content.parts extracted as empty/invalid)."
}
} else if (!is.null(parsed_content$promptFeedback$blockReason)) {
warning(paste("Gemini response blocked:", parsed_content$promptFeedback$blockReason))
paste0("Our announcer got shy! (Content blocked: ", parsed_content$promptFeedback$blockReason, ")")
} else {
warning("Gemini response has no candidates and no block reason.")
"No text generated (unknown reason)."
}
}, error = function(e) {
warning("Error parsing Gemini response: ", e$message)
"The dinosaurs are too shy to fight right now! (Parsing error fallback)"
})
return(generated_text)
} else {
warning("Gemini API HTTP error or invalid response (response might be NULL or non-JSON/non-200).")
return("The dinosaur fight announcer is taking a nap. (API Error or Network Problem)")
}
}
# Example usage
state <- new.env()
state$log <- ""
gemini_message <- call_gemini_attack_message("T-rex", "Triceratops", 5)
state$log <- paste0(state$log, "<p>", gemini_message, "</p>")
print(paste("Gemini returned:", gemini_message))
library(httr)
library(jsonlite)
setwd("C://Users//shopp//Documents//R//dinosaur_battle_app")
GEMINI_API_KEY <- readLines("gem_api.txt", warn = FALSE)
call_gemini_attack_message <- function(dinosaur1_name, dinosaur2_name, damage_amount) {
api_url <- paste0("https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=", GEMINI_API_KEY)
prompt_text <- paste0(
"You are a fun and exciting game announcer for a dinosaur battle game for a 6-year-old. ",
"Describe a dinosaur attack in an energetic and imaginative way with less than 170 characters. ",
"The attacking dinosaur is '", dinosaur1_name, "' and the defending dinosaur is '", dinosaur2_name, "', dealing ", damage_amount, " damage. ",
"Make sure the message clearly states the attacker, the defender, and the damage dealt. ",
"Use bold HTML tags `<b>` for the damage number.",
"Example: T-Rex bites Triceratops on the back for <b>15</b> damage!"
)
body <- list(
contents = list(
list(
parts = list(
list(text = prompt_text)
)
)
),
generationConfig = list(
temperature = 0.8,
topP = 0.9,
topK = 40,
maxOutputTokens = 50
),
safetySettings = list(
list(category = "HARM_CATEGORY_HATE_SPEECH", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_DANGEROUS_CONTENT", threshold = "BLOCK_MEDIUM_AND_ABOVE"),
list(category = "HARM_CATEGORY_HARASSMENT", threshold = "BLOCK_MEDIUM_AND_ABOVE")
)
)
response <- tryCatch({
POST(
url = api_url,
add_headers("Content-Type" = "application/json"),
body = toJSON(body, auto_unbox = TRUE)
)
}, error = function(e) {
warning("Error during HTTP POST to Gemini API: ", e$message)
return(NULL)
})
if (!is.null(response) && http_type(response) == "application/json" && status_code(response) == 200) {
parsed_content <- fromJSON(content(response, "text", encoding = "UTF-8"))
print("--- Full Gemini Response ---")
print(parsed_content)
print("--------------------------")
generated_text <- tryCatch({
# Check if 'candidates' exists and has at least one row (since it's a data.frame)
if (!is.null(parsed_content$candidates) && nrow(parsed_content$candidates) > 0) {
# **THIS IS THE CRUCIAL FIX**
# Access the first row [1, ] of the candidates data.frame, then get the content.parts column from it.
extracted_text <- parsed_content$candidates$content$parts[1]
if (!is.null(extracted_text) && !is.na(extracted_text) && nchar(extracted_text) > 0) {
extracted_text
} else {
warning("Gemini response candidate's 'content.parts' column is empty or invalid after extraction.")
"No text generated (content.parts extracted as empty/invalid)."
}
} else if (!is.null(parsed_content$promptFeedback$blockReason)) {
warning(paste("Gemini response blocked:", parsed_content$promptFeedback$blockReason))
paste0("Our announcer got shy! (Content blocked: ", parsed_content$promptFeedback$blockReason, ")")
} else {
warning("Gemini response has no candidates and no block reason.")
"No text generated (unknown reason)."
}
}, error = function(e) {
warning("Error parsing Gemini response: ", e$message)
"The dinosaurs are too shy to fight right now! (Parsing error fallback)"
})
return(generated_text)
} else {
warning("Gemini API HTTP error or invalid response (response might be NULL or non-JSON/non-200).")
return("The dinosaur fight announcer is taking a nap. (API Error or Network Problem)")
}
}
# Example usage
state <- new.env()
state$log <- ""
gemini_message <- call_gemini_attack_message("T-rex", "Triceratops", 5)
state$log <- paste0(state$log, "<p>", gemini_message$text, "</p>")
print(paste("Gemini returned:", gemini_message))
gemini_message
gemini_message[[1]]
gemini_message[[1]]$text
runApp('dinosaur_battles_shiny.R')
runApp('dinosaur_battles_shiny.R')
runApp('dinosaur_battles_shiny.R')
runApp('dinosaur_battles_shiny.R')
